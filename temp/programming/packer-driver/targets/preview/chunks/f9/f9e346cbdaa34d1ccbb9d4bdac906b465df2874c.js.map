{"version":3,"sources":["file:///Users/joan/Desktop/%E6%B8%85%E5%A4%A7/%E8%BB%9F%E9%AB%94%E5%AF%A6%E9%A9%97%E8%A8%AD%E8%A8%88/Boomboom-Frontier/node_modules/@firebase/logger/dist/esm/index.esm2017.js"],"names":["Logger","setLogLevel","level","instances","forEach","inst","setUserLogHandler","logCallback","options","customLogLevel","levelStringToEnum","instance","userLogHandler","args","message","map","arg","toString","Error","JSON","stringify","ignored","filter","join","logLevel","LogLevel","toLowerCase","type","name","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","now","Date","toISOString","method","console","constructor","_logLevel","_logHandler","_userLogHandler","push","val","TypeError","logHandler","debug","log","info","warn","error"],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n"]}